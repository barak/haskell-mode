\input texinfo          @c -*-texinfo-*-
@c %**start of header
@setfilename haskell-mode.info
@settitle haskell-mode manual 13.x
@c %**end of header

@dircategory Emacs
@direntry
* Haskell Mode: (haskell-mode).             Haskell Development Environment for Emacs(en)
@end direntry

@copying
This manual is for haskell-mode, version 13.x.

Copyright @copyright{} 2013 Haskell Mode contributors.

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts.
@end quotation
@end copying

@titlepage
@title Haskell Mode
@subtitle Haskell Development Environment for Emacs

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Haskell Mode

Haskell Mode is an Haskell development Environment for GNU Emacs.  It provides syntax-based indentation, font locking, and supports running an inferior Haskell interpreter (e.g. GHCi).
 
@insertcopying
@end ifnottex

@menu
* Introduction::
* Getting Started::
* Editing Code::
* Unicode::
* Indentation::
* inferior-haskell-mode::
* haskell-interactive-mode::
* haskell-cabal-mode::
* Concept index::
* Function index::
* Variable index::

@end menu

@node Introduction, Getting Started, Top, Top
@chapter Introduction

@dfn{Haskell Mode} is a major mode providing a convenient environment for editing @uref{http://www.haskell.org,Haskell} programs.

Some of its major features are:

@itemize
@item
Syntax highlighting (font lock),
@item
automatic indentation,
@item
on-the-fly documentation,
@item
interaction with inferior GHCi/Hugs instance, and
@item
scanning declarations and placing them in a menu.
@end itemize

This Info manual is work in progress and incomplete. However, you can find more information at these locations:

@itemize
@item
@uref{https://github.com/haskell/haskell-mode,Haskell Mode's GitHub Home}
@item
@uref{http://www.haskell.org/haskellwiki/Haskell_mode_for_Emacs,Haskell Wiki Emacs Page}
@end itemize

@node Getting Started, Editing Code, Introduction, Top
@chapter Getting Started

If you are reading this, you have most likely already managed to install Haskell mode in one way or another. However, just for the record, the officially recommended way to install Haskell Mode via the @uref{http://marmalade-repo.org/packages/haskell-mode,Marmalade package archive} which contains the latest stable release of Haskell Mode.

@findex haskell-customize
Most of Haskell Mode's settings are configurable via customizable variables (@xref{Easy Customization,,, emacs}, for details). You can use @kbd{M-x haskell-customize} to browse the @code{haskell} customization sub-tree.

One of the important setting you should customize is the @code{haskell-mode-hook} variable (@pxref{Hooks,,, emacs}) which gets run right after the @code{haskell-mode} major mode is initialized for a buffer. You can customize @code{haskell-mode-hook} by @kbd{M-x customize-variable @key{RET} haskell-mode-hook}. It's highly recommended you set up indentation to match to match your preferences, @xref{Indentation}.

@c TODO:
@c provide basic instructions to get up and running with haskell-mode
@c tell about the most important commands

@node Editing Code, Unicode, Getting Started, Top
@chapter Editing Code

TODO/WRITEME

@node Unicode, Indentation, Editing Code, Top
@chapter Unicode support

@cindex Unicode

See the Haskell Wiki's entry on @uref{http://www.haskell.org/haskellwiki/Unicode-symbols, Unicode Symbols} for general information about Unicode support in Haskell.

As Emacs supports editing files containing Unicode out of the box, so does Haskell Mode. As an add-on, Haskell Mode includes the @code{haskell-unicode} input method which allows you to easily type a number of Unicode symbols that are useful when writing Haskell code; for more details @xref{Input Methods,,,Emacs}.

To automatically enable the @code{haskell-unicode} input method in haskell-mode buffers use @kbd{M-x customize-variable @key{RET} haskell-mode-hook} or put the following code in your `.emacs` file:

@example
(add-hook 'haskell-mode-hook 'turn-on-haskell-unicode-input-method)
@end example

@noindent
To temporarily enable this input method for a single buffer you can use @kbd{M-x turn-on-haskell-unicode-input-method}.

When the @code{haskell-unicode} input method is active, you can simply type @samp{->} and it is immediately replaced with @samp{→}. Use @kbd{C-\} to toggle the input method. To see a table of all key sequences use @kbd{M-x describe-input-method @key{RET} haskell-unicode}. A sequence like @samp{<=} is ambiguous and can mean either @samp{⇐} or @samp{≤}. Typing it presents you with a choice. Type @kbd{1} or @kbd{2} to select an option or keep typing to use the default option.

If you don't like the highlighting of partially matching tokens you can turn it off by setting @code{input-method-highlight-flag} to @code{nil} via @kbd{M-x customize-variable}.

@node Indentation, inferior-haskell-mode, Unicode, Top
@chapter Indentation

@cindex indentation

Three Haskell indentation schemes are included in Haskell mode:

@ftable @code

@item turn-on-haskell-simple-indent

A very simple indentation scheme; In this scheme, @key{TAB} will now move the cursor to the next indent point in the previous nonblank line.  An indent point is a non-whitespace character following whitespace.

@item turn-on-haskell-indent

Intelligent semi-automatic indentation for Haskell's layout rule.  The basic idea is to have @key{TAB} cycle through possibilities indentation points based on some clever heuristics.

The rationale and the implementation principles are described in more detail the article @cite{Dynamic tabbing for automatic indentation with the layout rule} published in the Journal of Functional Programming 8.5 (1998).

@item turn-on-haskell-indentation

Improved variation of @code{turn-on-haskell-indent} indentation mode. Rebinds @key{RET} and @key{DEL}, so that indentations can be set and deleted as if they were real tabs.

@end ftable

To enable one of these three mutually exclusive indentation schemes, you just need call one (and only one!) of the `turn-on-*' commands while in the buffer you want the indentation scheme to be activated for.

The recommended way is to add one of @code{turn-on-*} commands to @code{haskell-mode-hook}. This can be done either by using @kbd{M-x customize-variable @key{RET} haskell-mode-hook} which provides a convenient user interface or by adding @emph{one} the following three lines to your @file{.emacs} file:

@example
(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
@end example


@node inferior-haskell-mode, haskell-interactive-mode, Indentation, Top
@chapter @code{inferior-haskell-mode}

@findex inferior-haskell-find-definition
@findex inferior-haskell-find-haddock
@findex inferior-haskell-info
@findex inferior-haskell-load-and-run
@findex inferior-haskell-load-file
@findex inferior-haskell-mode
@findex inferior-haskell-reload-file
@findex inferior-haskell-start-process
@findex inferior-haskell-type
@vindex haskell-program-name
@vindex inferior-haskell-mode-hook

The major mode @code{inferior-haskell-mode} provides support for interacting with an inferior Haskell process.

The Haskell interpreter used by the inferior Haskell mode is autodetected by default, but is customizable via the @code{haskell-program-name} variable.

Currently, GHCi and Hugs are support as Haskell interpreter.

TODO/WRITEME
@c write about supported features

@node haskell-interactive-mode, haskell-cabal-mode, inferior-haskell-mode, Top
@chapter @code{haskell-interactive-mode}

A new mode for the REPL and GHCi sessions is called @code{haskell-interactive-mode}, it intends to replace @code{inferior-haskell-mode}, but comes with different features.

TODO/WRITEME

@node haskell-cabal-mode, Concept index, haskell-interactive-mode, Top
@chapter @code{haskell-cabal-mode}

@findex inferior-cabal-mode
@vindex inferior-cabal-mode-hook

TODO/WRITEME

@node Concept index, Function index, haskell-cabal-mode, Top
@unnumbered Concept index

@printindex cp

@node Function index, Variable index, Concept index, Top
@unnumbered Function index

@printindex fn

@node Variable index,  , Function index, Top
@unnumbered Variable index

@printindex vr

@bye

@c Local Variables:
@c eval: (visual-line-mode t)
@c eval: (linum-mode t)
@c eval: (hl-line-mode t)
@c End:
