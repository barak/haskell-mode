;; Object haskell-mode-2.0/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "haskell-mode-2.0/"
  :tables (list 
   (semanticdb-table "haskell-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [6987 7000]) ("haskell-version" variable (:constant-flag t :default-value "2.0") nil [7085 7152]) ("haskell-version" function (:user-visible-flag t) nil [7153 7321]) ("defgroup" code nil nil [7323 7431]) ("turn-on-haskell-decl-scan" function (:prototype-flag t :user-visible-flag t) nil [7479 7580]) ("turn-on-haskell-doc-mode" function (:prototype-flag t :user-visible-flag t) nil [7581 7669]) ("turn-on-haskell-indent" function (:prototype-flag t :user-visible-flag t) nil [7670 7756]) ("turn-on-haskell-simple-indent" function (:prototype-flag t :user-visible-flag t) nil [7757 7864]) ("haskell-ds-create-imenu-index" function (:prototype-flag t) nil [7908 7969]) ("haskell-font-lock-choose-keywords" function (:prototype-flag t) nil [7970 8035]) ("haskell-doc-current-info" function (:prototype-flag t) nil [8036 8086]) ("turn-on-haskell-font-lock" function nil nil [8111 8270]) ("turn-on-haskell-hugs" function nil nil [8271 8407]) ("turn-on-haskell-ghci" function nil nil [8408 8544]) ("haskell-literate" variable (:user-visible-flag t) nil [8587 9090]) ("make-variable-buffer-local" code nil nil [9091 9137]) ("haskell-literate-default" variable (:user-visible-flag t :default-value (quote bird)) nil [9196 9525]) ("haskell-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [3 26] (quote switch-to-haskell)) (define-key map [3 12] (quote inferior-haskell-load-file)) (define-key map [3 18] (quote inferior-haskell-reload-file)) (define-key map [3 2] (quote switch-to-haskell)) map)) nil [9541 10362]) ("haskell-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table))) (modify-syntax-entry 32 " " table) (modify-syntax-entry 9 " " table) (modify-syntax-entry 34 "\"" table) (modify-syntax-entry 39 "'" table) (modify-syntax-entry 95 "w" table) (modify-syntax-entry 40 "()" table) (modify-syntax-entry 41 ")(" table) (modify-syntax-entry 91 "(]" table) (modify-syntax-entry 93 ")[" table) (cond ((featurep (quote xemacs)) (modify-syntax-entry 123 "(}5" table) (modify-syntax-entry 125 "){8" table) (modify-syntax-entry 45 "_ 1267" table)) (t (modify-syntax-entry 123 "(}1nb" table) (modify-syntax-entry 125 "){4nb" table) (modify-syntax-entry 45 "_ 123" table))) (modify-syntax-entry 10 ">" table) (let (i lim) (map-char-table (lambda (k v) (when (equal v (quote (1))) (if (consp k) (setq i (car k) lim (cdr k)) (setq i k lim k)) (while (<= i lim) (when (> i 127) (modify-syntax-entry i "_" table)) (setq i (1+ i))))) (standard-syntax-table))) (modify-syntax-entry 96 "$`" table) (modify-syntax-entry 92 "\\" table) (mapcar (lambda (x) (modify-syntax-entry x "_" table)) "!#$%&*+./:<=>?@^|~") (unless (featurep (quote mule)) (mapcar (lambda (x) (modify-syntax-entry x "_" table)) (concat "¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿" "×÷")) (mapcar (lambda (x) (modify-syntax-entry x "w" table)) (concat "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ" "ØÙÚÛÜİŞß" "àáâãäåæçèéêëìíîïğñòóôõö" "øùúûüışÿ"))) table)) nil [10381 12638]) ("haskell-vars" function nil nil [12667 14241]) ("haskell-mode-hooks" variable nil nil [14243 14437]) ("haskell-mode" function (:user-visible-flag t) nil [14481 16035]) ("literate-haskell-mode" function (:user-visible-flag t) nil [16052 16388]) ("haskell-mode-generic" function (:arguments ("literate")) nil [16390 16807]) ("haskell-mode" package nil nil [17148 17171]))
    :file "haskell-mode.el"
    :pointmax 17203
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
